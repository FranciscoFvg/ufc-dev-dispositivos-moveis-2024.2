package com.example.crud1app.ui.screens

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import com.example.crud1app.model.Item
import com.example.crud1app.viewModel.ItemViewModel

@Composable
fun ItemScreen (modifier: Modifier = Modifier, viewModel: ItemViewModel) {
    var title by remember { mutableStateOf(TextFieldValue("")) }
    var description by remember { mutableStateOf(TextFieldValue("")) }

    val itens = viewModel.items

    var showDialog by remember { mutableStateOf(false) }

    var selectedItem by remember { mutableStateOf<Item?>(null) }

    Column(
        modifier = Modifier.padding(16.dp)
    ) {
        TextField(
            value = title,
            onValueChange = { title = it },
            label = { Text("Título")},
            modifier = Modifier.fillMaxWidth()
        )

        TextField(
            value = description,
            onValueChange = { description = it },
            label = { Text("Descrição")},
            modifier = Modifier.fillMaxWidth()
        )

        Button(
            onClick = {
                if(title.text.isNotEmpty() && description.text.isNotEmpty()) {
                    viewModel.addItem(
                        Item(title.text, description.text)
                    )
                }
                title = TextFieldValue("")
                description = TextFieldValue("")
            },
            modifier = Modifier.padding(8.dp)
        ) {
            Text("Adicionar")
        }

        LazyColumn {
            items(viewModel.items.value.size) { index ->
                val item = viewModel.items.value[index]
                Text("Título: ${item.title}")
                Text("Descrição: ${item.description}")
                Button(
                    onClick = { viewModel.deleteItem(item.id) },
                    modifier = Modifier.padding(8.dp)
                ) {
                    Text("Excluir")
                }
            }
        }
    }
}
